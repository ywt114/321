name: Build x86_64_5.15

on:
  repository_dispatch:
  workflow_dispatch:
#  schedule:
#    - cron: '0 18 * * 5'
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: x86_64.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2_5.15.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    timeout-minutes: 360

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64_5.15]

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo -E rm -rf /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL https://raw.githubusercontent.com/ywt114/poweroff/main/depend)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo -E timedatectl set-timezone "$TZ"

        df -hT

    - name: 设置当前的日期
      id: date
      run: |
        echo "date1=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%Y.%m.%d')" >> $GITHUB_ENV

    - name: 克隆源代码
      run: |
        git clone -b $REPO_BRANCH $REPO_URL openwrt

    - name: 自定义配置feeds
      run: |
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

    - name: 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds install -a

    - name: 自定义配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载包文件
      id: package
      working-directory: ./openwrt
      run: |
        make defconfig
        make download -j$(($(nproc)+1))
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: 'openwrt'

    - name: 编译前空间情况
      run: |
        df -hT

    - name: 编译固件
      id: compile
      working-directory: ./openwrt
      run: |
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 编译后空间情况
      run: |
        df -hT

    - name: 重命名文件
      working-directory: ./openwrt
      run: |
        cd bin/targets/x86/64/
        rename -v 's/^/${{ env.date1 }}-5.15-/' openwrt*.gz || true

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        mkdir -p firmware
        mkdir -p firmware/package/
        mv -f openwrt/bin/targets/x86/64/{*squashfs-combined-efi.i*gz,*sysupgrade*} firmware/ 2>/dev/null || true
        cp $(find openwrt/bin/packages/ -type f -name "*.ipk") firmware/package/
        cp openwrt/.config firmware/${{matrix.target}}.config
        cp openwrt/build_dir/target-*/linux-*/linux-*/.config firmware/${{matrix.target}}_kernel.config
        cd firmware
        echo "${{ env.date1 }}" > version.txt
        md5=$((md5sum *squashfs-combined-efi.i*gz) | awk '{print $1}') 2>/dev/null
        echo $md5 > md5sum.txt
        rm -rf sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.date1 }}_${{matrix.target}}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.date1 }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件发布
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date1 }}_${{matrix.target}}
        tag_name: ${{matrix.target}}
        body_path: release.txt

    - name: 删除工作流
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 4

    - name: 删除旧版本
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      with:
        keep_latest: 4
        delete_tags: true
